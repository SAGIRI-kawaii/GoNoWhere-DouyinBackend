// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0--rc2
// source: message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DouyinRelationServiceClient is the client API for DouyinRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DouyinRelationServiceClient interface {
	FriendList(ctx context.Context, in *DouyinRelationFriendListRequest, opts ...grpc.CallOption) (*DouyinRelationFriendListResponse, error)
	Chat(ctx context.Context, in *DouyinMessageChatRequest, opts ...grpc.CallOption) (*DouyinMessageChatResponse, error)
	Action(ctx context.Context, in *DouyinRelationActionRequest, opts ...grpc.CallOption) (*DouyinRelationActionResponse, error)
}

type douyinRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDouyinRelationServiceClient(cc grpc.ClientConnInterface) DouyinRelationServiceClient {
	return &douyinRelationServiceClient{cc}
}

func (c *douyinRelationServiceClient) FriendList(ctx context.Context, in *DouyinRelationFriendListRequest, opts ...grpc.CallOption) (*DouyinRelationFriendListResponse, error) {
	out := new(DouyinRelationFriendListResponse)
	err := c.cc.Invoke(ctx, "/messageClient.DouyinRelationService/FriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *douyinRelationServiceClient) Chat(ctx context.Context, in *DouyinMessageChatRequest, opts ...grpc.CallOption) (*DouyinMessageChatResponse, error) {
	out := new(DouyinMessageChatResponse)
	err := c.cc.Invoke(ctx, "/messageClient.DouyinRelationService/Chat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *douyinRelationServiceClient) Action(ctx context.Context, in *DouyinRelationActionRequest, opts ...grpc.CallOption) (*DouyinRelationActionResponse, error) {
	out := new(DouyinRelationActionResponse)
	err := c.cc.Invoke(ctx, "/messageClient.DouyinRelationService/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DouyinRelationServiceServer is the server API for DouyinRelationService service.
// All implementations must embed UnimplementedDouyinRelationServiceServer
// for forward compatibility
type DouyinRelationServiceServer interface {
	FriendList(context.Context, *DouyinRelationFriendListRequest) (*DouyinRelationFriendListResponse, error)
	Chat(context.Context, *DouyinMessageChatRequest) (*DouyinMessageChatResponse, error)
	Action(context.Context, *DouyinRelationActionRequest) (*DouyinRelationActionResponse, error)
	mustEmbedUnimplementedDouyinRelationServiceServer()
}

// UnimplementedDouyinRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDouyinRelationServiceServer struct {
}

func (UnimplementedDouyinRelationServiceServer) FriendList(context.Context, *DouyinRelationFriendListRequest) (*DouyinRelationFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedDouyinRelationServiceServer) Chat(context.Context, *DouyinMessageChatRequest) (*DouyinMessageChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedDouyinRelationServiceServer) Action(context.Context, *DouyinRelationActionRequest) (*DouyinRelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedDouyinRelationServiceServer) mustEmbedUnimplementedDouyinRelationServiceServer() {}

// UnsafeDouyinRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DouyinRelationServiceServer will
// result in compilation errors.
type UnsafeDouyinRelationServiceServer interface {
	mustEmbedUnimplementedDouyinRelationServiceServer()
}

func RegisterDouyinRelationServiceServer(s grpc.ServiceRegistrar, srv DouyinRelationServiceServer) {
	s.RegisterService(&DouyinRelationService_ServiceDesc, srv)
}

func _DouyinRelationService_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinRelationFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinRelationServiceServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageClient.DouyinRelationService/FriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinRelationServiceServer).FriendList(ctx, req.(*DouyinRelationFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DouyinRelationService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinMessageChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinRelationServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageClient.DouyinRelationService/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinRelationServiceServer).Chat(ctx, req.(*DouyinMessageChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DouyinRelationService_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouyinRelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DouyinRelationServiceServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageClient.DouyinRelationService/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DouyinRelationServiceServer).Action(ctx, req.(*DouyinRelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DouyinRelationService_ServiceDesc is the grpc.ServiceDesc for DouyinRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DouyinRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messageClient.DouyinRelationService",
	HandlerType: (*DouyinRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FriendList",
			Handler:    _DouyinRelationService_FriendList_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _DouyinRelationService_Chat_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _DouyinRelationService_Action_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
