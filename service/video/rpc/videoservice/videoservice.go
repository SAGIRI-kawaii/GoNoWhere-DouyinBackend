// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package videoservice

import (
	"context"

	"mini-douyin/service/video/rpc/video"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DouyinFeedRequest           = video.DouyinFeedRequest
	DouyinFeedResponse          = video.DouyinFeedResponse
	DouyinPublishActionRequest  = video.DouyinPublishActionRequest
	DouyinPublishActionResponse = video.DouyinPublishActionResponse
	DouyinPublishListRequest    = video.DouyinPublishListRequest
	DouyinPublishListResponse   = video.DouyinPublishListResponse
	User                        = video.User
	Video                       = video.Video

	VideoService interface {
		PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error)
		PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error)
		Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error)
	}

	defaultVideoService struct {
		cli zrpc.Client
	}
)

func NewVideoService(cli zrpc.Client) VideoService {
	return &defaultVideoService{
		cli: cli,
	}
}

func (m *defaultVideoService) PublishAction(ctx context.Context, in *DouyinPublishActionRequest, opts ...grpc.CallOption) (*DouyinPublishActionResponse, error) {
	client := video.NewVideoServiceClient(m.cli.Conn())
	return client.PublishAction(ctx, in, opts...)
}

func (m *defaultVideoService) PublishList(ctx context.Context, in *DouyinPublishListRequest, opts ...grpc.CallOption) (*DouyinPublishListResponse, error) {
	client := video.NewVideoServiceClient(m.cli.Conn())
	return client.PublishList(ctx, in, opts...)
}

func (m *defaultVideoService) Feed(ctx context.Context, in *DouyinFeedRequest, opts ...grpc.CallOption) (*DouyinFeedResponse, error) {
	client := video.NewVideoServiceClient(m.cli.Conn())
	return client.Feed(ctx, in, opts...)
}
