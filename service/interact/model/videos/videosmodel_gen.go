// Code generated by goctl. DO NOT EDIT.

package videos

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	videosFieldNames          = builder.RawFieldNames(&Videos{})
	videosRows                = strings.Join(videosFieldNames, ",")
	videosRowsExpectAutoSet   = strings.Join(stringx.Remove(videosFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	videosRowsWithPlaceHolder = strings.Join(stringx.Remove(videosFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheVideosIdPrefix      = "cache:videos:id:"
	cacheVideosVideoIdPrefix = "cache:videos:videoId:"
)

type (
	videosModel interface {
		Insert(ctx context.Context, data *Videos) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Videos, error)
		FindOneByVideoId(ctx context.Context, videoId int64) (*Videos, error)
		Update(ctx context.Context, data *Videos) error
		Delete(ctx context.Context, id int64) error
		GetFeedVideos(ctx context.Context, limit int, latestTime *int64) ([]*Videos, error)
		GetVideosByAuthorID(ctx context.Context, authorid *int64) ([]*Videos, error)
		FindVideoListByUserId(ctx context.Context, authorId int64) ([]*Videos, error)
		AddFavoriteByVideoId(ctx context.Context, VideoId int64) error
		ReduceFavoriteByVideoId(ctx context.Context, VideoId int64) error
		AddCommentByVideoId(ctx context.Context, VideoId int64) error
		ReduceCommentByVideoId(ctx context.Context, VideoId int64) error
	}

	defaultVideosModel struct {
		sqlc.CachedConn
		table string
	}

	Videos struct {
		Id            int64        `db:"id"` // 自增主键
		CreateAt      time.Time    `db:"create_at"`
		DeletedAt     sql.NullTime `db:"deleted_at"`
		UpdateTime    time.Time    `db:"update_time"`
		VideoId       int64        `db:"video_id"`
		AuthorId      int64        `db:"author_id"`
		Title         string       `db:"title"`
		FavoriteCount int64        `db:"favorite_count"`
		CommentCount  int64        `db:"comment_count"`
		PlayUrl       string       `db:"play_url"`
		CoverUrl      string       `db:"cover_url"`
	}
)

func newVideosModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultVideosModel {
	return &defaultVideosModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`videos`",
	}
}

func (m *defaultVideosModel) GetFeedVideos(ctx context.Context, limit int, latestTime *int64) ([]*Videos, error) {
	var resp []*Videos
	if latestTime == nil || *latestTime == 0 {
		cur_time := int64(time.Now().UnixMilli())
		latestTime = &cur_time
	}
	query := fmt.Sprintf("select %s from %s where `update_time` <= ? order by %s desc %s", videosRows, m.table, "update_time", "limit 30")
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, *latestTime)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}
func (m *defaultVideosModel) GetVideosByAuthorID(ctx context.Context, authorid *int64) ([]*Videos, error) {
	var resp []*Videos
	query := fmt.Sprintf("select %s from %s where `author_id` = ? ", videosRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, *authorid)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}

}
func (m *defaultVideosModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	videosIdKey := fmt.Sprintf("%s%v", cacheVideosIdPrefix, id)
	videosVideoIdKey := fmt.Sprintf("%s%v", cacheVideosVideoIdPrefix, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, videosIdKey, videosVideoIdKey)
	return err
}

func (m *defaultVideosModel) FindOne(ctx context.Context, id int64) (*Videos, error) {
	videosIdKey := fmt.Sprintf("%s%v", cacheVideosIdPrefix, id)
	var resp Videos
	err := m.QueryRowCtx(ctx, &resp, videosIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", videosRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideosModel) FindOneByVideoId(ctx context.Context, videoId int64) (*Videos, error) {
	videosVideoIdKey := fmt.Sprintf("%s%v", cacheVideosVideoIdPrefix, videoId)
	var resp Videos
	err := m.QueryRowIndexCtx(ctx, &resp, videosVideoIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `video_id` = ? limit 1", videosRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, videoId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideosModel) Insert(ctx context.Context, data *Videos) (sql.Result, error) {
	videosIdKey := fmt.Sprintf("%s%v", cacheVideosIdPrefix, data.Id)
	videosVideoIdKey := fmt.Sprintf("%s%v", cacheVideosVideoIdPrefix, data.VideoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, videosRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.VideoId, data.AuthorId, data.Title, data.FavoriteCount, data.CommentCount, data.PlayUrl, data.CoverUrl)
	}, videosIdKey, videosVideoIdKey)
	return ret, err
}

func (m *defaultVideosModel) Update(ctx context.Context, newData *Videos) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	videosIdKey := fmt.Sprintf("%s%v", cacheVideosIdPrefix, data.Id)
	videosVideoIdKey := fmt.Sprintf("%s%v", cacheVideosVideoIdPrefix, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, videosRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DeletedAt, newData.VideoId, newData.AuthorId, newData.Title, newData.FavoriteCount, newData.CommentCount, newData.PlayUrl, newData.CoverUrl, newData.Id)
	}, videosIdKey, videosVideoIdKey)
	return err
}

func (m *defaultVideosModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheVideosIdPrefix, primary)
}

func (m *defaultVideosModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", videosRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultVideosModel) tableName() string {
	return m.table
}


func (m *defaultVideosModel) FindVideoListByUserId(ctx context.Context, authorId int64) ([]*Videos, error) {

	// VideosIdKey := fmt.Sprintf("%s%v", cacheVideosIdPrefix, authorId)
	// var resp Comments
	var c []*Videos
	// err := m.QueryRowCtx(ctx, &c, VideosIdKey , func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `author_id` = ?", videosRows, m.table)
		println(query)
		err := m.QueryRowsNoCacheCtx(ctx, &c, query, authorId)
		// return conn.QueryRowsCtx(ctx, v, query, authorId)
	// })
	switch err {
	case nil:
		return c, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultVideosModel) AddFavoriteByVideoId(ctx context.Context, VideoId int64) error {
	data, err := m.FindOneByVideoId(ctx, VideoId)
	if err != nil {
		return err
	}
	data.FavoriteCount = data.FavoriteCount + 1
	err = m.Update(ctx, data)
	return err
}
func (m *defaultVideosModel) ReduceFavoriteByVideoId(ctx context.Context, VideoId int64) error {
	data, err := m.FindOneByVideoId(ctx, VideoId)
	if err != nil {
		return err
	}
	if(data.FavoriteCount>0){
		data.FavoriteCount = data.FavoriteCount - 1
	}

	err = m.Update(ctx, data)
	return err
}

func(m *defaultVideosModel)AddCommentByVideoId(ctx context.Context, VideoId int64) error{
	data, err :=m.FindOneByVideoId(ctx,VideoId)
	if err != nil {
		return err
	}
	data.CommentCount = data.CommentCount + 1
	err = m.Update(ctx, data)
	return err
}
func(m *defaultVideosModel) ReduceCommentByVideoId(ctx context.Context, VideoId int64) error{
	data, err :=m.FindOneByVideoId(ctx,VideoId)
	if err != nil {
		return err
	}
	if(data.CommentCount>0){
		data.CommentCount = data.CommentCount - 1
	}
	
	err = m.Update(ctx, data)
	return err
}
